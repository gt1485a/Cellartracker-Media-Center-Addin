<Mcml xmlns="http://schemas.microsoft.com/2006/mcml"
      xmlns:cor="assembly://mscorlib/System"
      xmlns:me="Me">

  <!-- This sample demonstrates how to use a TransformByAttributeAnimation  -->
  <!-- to create index-driven animation transformations.                    -->
  <UI Name="TransformByAttributeAnimationWithOverride">

    <Locals>
      <!-- Our data source defines the number of objects that we are      -->
      <!-- going to repeat, as well as the Index value we will be using   -->
      <!-- for each one.                                                  -->
      <ArrayListDataSet Name="Peanuts">
        <Source>
          <cor:Int32 Int32="4"/>
          <cor:Int32 Int32="3"/>
          <cor:Int32 Int32="2"/>
          <cor:Int32 Int32="1"/>
          <cor:Int32 Int32="0"/>
        </Source>
      </ArrayListDataSet>
    </Locals>

    <Content>

      <!-- Flow out a data-driven list of peanuts. -->
      <Repeater Layout="HorizontalFlow" Source="[Peanuts]">
        <Content>

          <!-- Give each item its own explicit index. -->
          <me:Peanut Name="Peanut" Padding="0,0,20,0" 
                     OverrideIndex="[RepeatedItem!cor:Int32]"/>

        </Content>
      </Repeater>

    </Content>

  </UI>


  <!-- This UI includes the logic to display a peanut graphic with a    -->
  <!-- TransformByAttributeAnimation on it.  Each peanut will manually  -->
  <!-- be given an explicit "OverrideIndex".                            -->
  <UI Name="Peanut">

    <Properties>
      <cor:Int32 Name="OverrideIndex"/>
    </Properties>

    <Content>

      <Graphic Name="Peanut" Content="res://McmlSampler,Version=6.0.6000.0,Culture=neutral,PublicKeyToken=31bf3856ad364e35!Peanut.Cartoon.1.png">
        <Animations>

          <!-- This TransformByAttributeAnimation object will apply the Source  -->
          <!-- animation differently to each item dependent on its index.  Each -->
          <!-- item's Value will by magnified more than the previous.           -->

          <!-- This object has a Magnitude of 0.3, which will lead to this      -->
          <!-- pattern:                                                         -->
          <!--   Index 0:  Value is unchanged                                   -->
          <!--   Index 1:  Value is multiplied by 1.3                           -->
          <!--   Index 2:  Value is multiplied by 1.6                           -->
          <!--   (and so on...)                                                 -->

          <!-- Here we give the animation its "OverrideIndex", allowing the     -->
          <!-- transformation to be based on a progression defined by the       -->
          <!-- markup author.                                                   -->
          <TransformByAttributeAnimation Name="IndexAnimation" 
                                         Attribute="Index" Magnitude="0.3" 
                                         Override="[OverrideIndex!cor:Single]">
            <Source>

              <!-- This is our reference animation.  We will be magnifying the  -->
              <!-- Value based on index, so its important to have a Value that  -->
              <!-- grows well.  In this case its a rotation, and each item in   -->
              <!-- list will rotate slightly more.                              -->
              <Animation Loop="-1">
                <Keyframes>

                  <ScaleKeyframe Time="0.0" Value="1.0,1.0,1.0" 
                                 Interpolation="SCurve"/>
                  <ScaleKeyframe Time="1.0" Value="1.2,1.2,1.2" 
                                 Interpolation="SCurve"/>
                  <ScaleKeyframe Time="2.0" Value="1.0,1.0,1.0" 
                                 Interpolation="SCurve"/>

                </Keyframes>
              </Animation>

            </Source>
          </TransformByAttributeAnimation>

        </Animations>
      </Graphic>

    </Content>

  </UI>

</Mcml>
