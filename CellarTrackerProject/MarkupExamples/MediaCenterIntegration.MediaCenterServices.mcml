<Mcml 
  xmlns="http://schemas.microsoft.com/2006/mcml"
  xmlns:cor="assembly://MSCorlib/System" 
  xmlns:addin="assembly://Microsoft.MediaCenter/Microsoft.MediaCenter.Hosting"
  xmlns:mc="assembly://Microsoft.MediaCenter/Microsoft.MediaCenter"
  xmlns:b="res://McmlSampler,Version=6.0.6000.0,Culture=neutral,PublicKeyToken=31bf3856ad364e35!Scenarios.SimpleButton.mcml">

  <!-- The Windows Media Center extensibility platform includes a full set  -->
  <!-- of APIs to interact with its media services. Such services include   -->
  <!-- playing media (such as music and videos) as well as other non-media  -->
  <!-- related services (like displaying a MediaCenter dialog box).         -->

  <!-- All Windows  Media Center services start with the AddInHost type,    -->
  <!-- which is located in the Microsoft.MediaCenter assembly.              -->

  <!-- This sample demonstrates how to access Windows Media Center services -->
  <!-- to display a dialog box and track the result of the dialog.          -->
  
  <UI Name="MediaCenterServices">

    <Locals>
      
      <!-- AddInHost is where all Windows Media Center-specific services start -->
      <!-- from. It must appear in the Locals section of a markup file.        -->
      <addin:AddInHost Name="AddInHost"/>

      <!-- The dialog result is stored here. The type is in another   -->
      <!-- namespace, so it has a different xmlns prefix than the     -->
      <!-- AddInHost type.                                            -->
      <mc:DialogResultHandler Name="ResultHandler"/>


      <!-- This is the list of buttons that will be displayed on the -->
      <!-- dialog                                                    -->
      <ArrayListDataSet Name="DialogButtons">
        <Source>
          <cor:String cor:String="Hello"/>
          <cor:String cor:String="Goodbye"/>
        </Source>
      </ArrayListDataSet>
      
    </Locals>

    <Rules>

      
      <!-- When the dialog is closed, bind the result to the Text content. -->
      <Changed Source="[ResultHandler.DialogDismissed]">
        <Actions>
          <Set Target="[Label.Content]" Value="[ResultHandler.Result.ToString]"/>
        </Actions>
      </Changed>

      <!-- Initial value of the text is empty. -->
      <Default Target="[Label.Content]" Value=" "/>

    </Rules>

    <Content>

      <Panel>
        <Layout>
          <FlowLayout Orientation="Vertical" ItemAlignment="Center"/>
        </Layout>

        <Children>

          <!-- Where the value is displayed. -->
          <Text Name="Label" Color="White" Font="Verdana,80"/>

          <!-- This is the Button. It has a property called Command that   -->
          <!-- accepts any Command.                                        -->
          <b:SimpleButton>
            <Command>

              <!-- InvokeCommand will call the Dialog method on the       -->
              <!-- AddInHost.MediaCenterEnvironment object. The dialog    -->
              <!-- takes text, captions, buttons, timeout and isModal     -->
              <!-- parameters. This sample has hard-coded values for      -->
              <!-- these parameters. When the dialog is dismissed, the    -->
              <!-- DialogClosed event on the ResultHandler will be fired. -->
              <!-- The changed rule will cause the return value to be     -->
              <!-- propogated to the Label text.                          -->
              <!-- Since this is an InvokeCommand, object paths can be    -->
              <!-- used for any of the parameters and they will be        -->
              <!-- evaluated on every invocation.                         -->
              <InvokeCommand Description="Click to show a dialog!"  
                             Target="[AddInHost.MediaCenterEnvironment.Dialog]" 
                             text="Hello!"
                             caption="Windows Media Center Dialog"
                             buttons="[DialogButtons]"
                             timeout="0"
                             isModal="true"
                             imagePath="null"
                             callback="[ResultHandler.Callback]"/>
              
            </Command>
          </b:SimpleButton>

        </Children>

      </Panel>

    </Content>
  </UI>

</Mcml>
